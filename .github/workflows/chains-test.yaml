# Copyright 2022 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

name: Test Chains with cosign

on:
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  chains-test:
    name: Chains e2e tests
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # undocumented OIDC support.
      packages: write
      contents: read

    steps:
    - name: Check out our repo
      uses: actions/checkout@v2

    - name: Setup Cluster
      run: |
        ./hack/kind/setup-kind.sh

    - name: Install all the everythings
      timeout-minutes: 10
      run: |
        kubectl apply -f ./config/common
        kubectl apply -f ./config/python
        # kubectl apply -f ./config/go

        # Give s a little time for things to spin up
        sleep 5

        kubectl apply -f ./config/kind/

        echo "Waiting for the pipelinerun to complete..."
        kubectl wait --timeout 15m --for=condition=Succeeded pipelineruns --all

    - name: Collect Taskrun diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get taskruns -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect Pipeline diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get pipelines -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect Pipelineruns diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get pipelineruns -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect node diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get nodes -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect pod diagnostics
      if: ${{ failure() }}
      run: |
        for ns in fulcio-system rekor-system trillian-system ctlog-system; do
          kubectl get pods -n${ns}

          for x in $(kubectl get pods -n${ns} -oname); do
            echo "::group:: describe $x"
            kubectl describe -n${ns} $x
            echo '::endgroup::'
          done
        done

    - name: Collect logs
      if: ${{ failure() }}
      run: |
        mkdir -p /tmp/logs
        kind export logs /tmp/logs

    - name: Upload artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: /tmp/logs
