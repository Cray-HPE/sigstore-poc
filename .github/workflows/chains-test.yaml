#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

name: Test Chains with cosign

on:
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  chains-test:
    name: Chains e2e tests
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # undocumented OIDC support.
      packages: write
      contents: read

    steps:
    - name: Check out our repo
      uses: actions/checkout@v2

    - name: Setup Cluster
      run: |
        ./hack/kind/setup-kind.sh

    - name: Run the Python pipeline
      timeout-minutes: 10
      run: |
        while ! kubectl apply -f ./config/common
        do
          echo "waiting for Tekton common components to get installed"
          sleep 2
        done
        while ! kubectl apply -f ./config/python
        do
          echo "waiting for Tekton Python components to get installed"
          sleep 2
        done

        # Give s a little time for things to spin up
        sleep 5

        kubectl apply -f ./config/kind/python-pipelinerun-kind.yaml

        echo "Waiting for the pipelinerun to complete..."
        kubectl wait --timeout 15m --for=condition=Succeeded pipelineruns --all

    - name: Run the Go pipeline
      timeout-minutes: 10
      run: |
        while ! kubectl apply -f ./config/go
        do
          echo "waiting for Tekton Python components to get installed"
          sleep 2
        done

        # Give s a little time for things to spin up
        sleep 5

        kubectl apply -f ./config/kind/go-pipelinerun-kind.yaml

        echo "Waiting for the pipelinerun to complete..."
        kubectl wait --timeout 15m --for=condition=Succeeded pipelineruns --all

    - name: Collect Pipelineruns diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get pipelineruns -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect Taskrun diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get taskruns -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect Pipeline diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get pipelines -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect node diagnostics
      if: ${{ failure() }}
      run: |
        for x in $(kubectl get nodes -oname); do
          echo "::group:: describe $x"
          kubectl describe $x
          echo '::endgroup::'
        done

    - name: Collect pod diagnostics
      if: ${{ failure() }}
      run: |
        for ns in default fulcio-system rekor-system trillian-system ctlog-system tekton-chains tekton-pipelines; do
          kubectl get pods -n${ns}

          for x in $(kubectl get pods -n${ns} -oname); do
            echo "::group:: describe $x"
            kubectl describe -n${ns} $x
            echo '::endgroup::'
          done
        done

    - name: Collect logs
      if: ${{ failure() }}
      run: |
        mkdir -p /tmp/logs
        kind export logs /tmp/logs --name sigstore

    - name: Upload artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: /tmp/logs
