apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: go-build-pipeline
spec:
  params:
    - name: git-url
    - name: git-revision
    - name: pathToContext
      description: The path to the build context, used by Kaniko - within the workspace
      default: src
    - name: MAIN_DIR
      description: Directory containing the main executable (one with main func) to build.
    - name: KO_DOCKER_REPO
      description: Registry to push the image to
    - name: KOFILE
      description: Path to the .ko.yaml file to use when building with ko.
      default: ./.ko.yaml
    - name: COSIGN_REPOSITORY
      type: string
      default: ""
    - name: SIGSTORE_CT_LOG_PUBLIC_KEY_FILE
      type: string
      default: ""
    - name: fulcio-endpoint
      description: Fulcio endpoint
      default: "http://fulcio.fulcio-system.svc"
    - name: rekor-endpoint
      description: Rekor endpoint
      default: "http://rekor.rekor-system.svc"
  results:
    - name: IMAGE-DIGEST
      description: Digest of the image that was created
      value: $(tasks.source-to-image.results.DIGESTS)
  workspaces:
    - name: git-source
    - name: dependencies
  tasks:
    - name: fetch-from-git
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: git-source
    - name: install-dependencies
      runAfter:
      - fetch-from-git
      taskRef:
        name: install-go-dependencies
      workspaces:
        - name: source
          workspace: git-source
        - name: dependencies
          workspace: dependencies
    - name: list-dependencies
      runAfter:
      - install-dependencies
      taskRef:
        name: list-dependencies
      workspaces:
        - name: dependencies
          workspace: dependencies
    - name: source-to-image
      taskRef:
        name: ko-build-image
      runAfter:
        - list-dependencies
      workspaces:
        - name: source
          workspace: dependencies
      params:
        - name: KO_DOCKER_REPO
          value: $(params.KO_DOCKER_REPO)
        - name: MAIN_DIR
          value: $(params.MAIN_DIR)
    #- name: sign-image
    #  taskRef:
    #    name: sign-image
    #  runAfter:
    #  - source-to-image
    #  params:
    #    - name: IMAGE
    #      value: $(tasks.source-to-image.results.DIGESTS)
    #    - name: COSIGN_REPOSITORY
    #      value: $(params.COSIGN_REPOSITORY)
    #    - name: SIGSTORE_CT_LOG_PUBLIC_KEY_FILE
    #      value: $(params.SIGSTORE_CT_LOG_PUBLIC_KEY_FILE)
    #    - name: dev.chainguard.refresher.rekor-endpoint
    #      value: $(params.rekor-endpoint)
    #    - name: dev.chainguard.refresher.fulcio-endpoint
    #      value: $(params.fulcio-endpoint)
    # TODO(vaikas): For some reason this is failing locally with:
    # 2022-02-15T20:01:50.759Z	FATAL	scan error: unable to initialize a scanner: unable to initialize a docker scanner: failed to parse the image name: could not parse reference: registry.local:5000/knative/gotest/cmd-393a2f52878a8695b66b1ca0f09a1138@sha256:29be25e5ef42e24c2506f93ba94e1deed981a10f1896d32d5dc1bde2d2b626a2
    # But it does not happen when running trivy binary, or docker run same version.
    #- name: trivy-scan
    #  taskRef:
    #    name: scan-trivy
    #  runAfter:
    #    - source-to-image
    #  params:
    #    - name: dev.chainguard.refresher.digest
    #      value: $(tasks.source-to-image.results.DIGESTS)
    #    - name: dev.chainguard.refresher.rekor-endpoint
    #      value: $(params.rekor-endpoint)
    #    - name: dev.chainguard.refresher.fulcio-endpoint
    #      value: $(params.fulcio-endpoint)

