#
# MIT License
#
# (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---


apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ctlog-system
  name: secret-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-operator
  namespace: ctlog-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-operator
subjects:
  - kind: ServiceAccount
    name: createcerts
    namespace: ctlog-system

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: createcerts
  namespace: ctlog-system

---


apiVersion: batch/v1
kind: Job
metadata:
  name: createcerts
  namespace: ctlog-system
spec:
  template:
    spec:
      serviceAccountName: createcerts
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createcerts
          image: ghcr.io/vaikas/createcerts@sha256:06272b0ea8add2d4798a0fb9cbcd092709669c6b3e1e23bac029955858cffbe3
          args: ["--namespace=ctlog-system", "--configmap=ctlog-config", "--secret=ctlog-secret"]

---


kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---


apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ctlog-system
  name: cm-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-cm-updater
  namespace: ctlog-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cm-operator
subjects:
  - kind: ServiceAccount
    name: createtree
    namespace: ctlog-system

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: createtree
  namespace: ctlog-system

---


apiVersion: batch/v1
kind: Job
metadata:
  name: createtree
  namespace: ctlog-system
spec:
  template:
    spec:
      serviceAccountName: createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createtree
          image: ghcr.io/vaikas/createtree@sha256:4abf45842808aa35a7aa4f2058ff7629ba1c4626571e1a64667828dd1d3759ab
          args: ["--namespace=ctlog-system", "--configmap=ctlog-config", "--display_name=ctlogtree"]

---


kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog
  namespace: ctlog-system

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog
  namespace: ctlog-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: ctlog-system
  name: ctlog
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: ctlog
      containers:
        - name: ctfe
          image: ghcr.io/vaikas/ct_server@sha256:935b13f5fa9646c55faf7219f26eea650aa2e509819ad6b11e41f8b4924fcaf7
          args: ["--http_endpoint=0.0.0.0:6962", "--log_config=/ctfe-config/ct_server.cfg", "--alsologtostderr"]
          volumeMounts:
            - name: keys
              mountPath: "/ctfe-keys"
              readOnly: true
            - name: config
              mountPath: "/ctfe-config"
              readOnly: true
          ports:
            - containerPort: 6962
      volumes:
        - name: keys
          secret:
            secretName: ctlog-secret
            items:
              - key: private
                path: privkey.pem
              - key: public
                path: pubkey.pem
              - key: rootca
                path: roots.pem
        - name: config
          configMap:
            name: ctlog-config
            items:
              - key: config
                path: ct_server.cfg

---


kind: Namespace
apiVersion: v1
metadata:
  name: fulcio-system

---


apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: fulcio-system
  name: secret-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-operator
  namespace: fulcio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-operator
subjects:
  - kind: ServiceAccount
    name: createcerts
    namespace: fulcio-system

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: createcerts
  namespace: fulcio-system

---


apiVersion: batch/v1
kind: Job
metadata:
  name: createcerts
  namespace: fulcio-system
spec:
  template:
    spec:
      serviceAccountName: createcerts
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createcerts
          image: ghcr.io/vaikas/createcerts@sha256:8dbdd3e56273bee36449cddb6b8bc8ac7d4cda4408e7d396f6000b3c37106150
          args: ["--secret=fulcio-secret"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

---


kind: Namespace
apiVersion: v1
metadata:
  name: fulcio-system

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: fulcio-config
  namespace: fulcio-system
data:
  config.json: |-
    {
      "OIDCIssuers": {
        "https://accounts.google.com": {
          "IssuerURL": "https://accounts.google.com",
          "ClientID": "sigstore",
          "Type": "email"
        },
        "https://token.actions.githubusercontent.com": {
          "IssuerURL": "https://token.actions.githubusercontent.com",
          "ClientID": "sigstore",
          "Type": "github-workflow"
        }
      },
      "MetaIssuers": {
        "https://container.googleapis.com/v1/projects/*/locations/*/clusters/*": {
          "ClientID": "sigstore",
          "Type": "kubernetes"
        }
      }
    }

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: fulcio
  namespace: fulcio-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: fulcio-system
  name: fulcio
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: fulcio
      # This doesn't actually use Kubernetes credentials, so don't mount them in.
      automountServiceAccountToken: false
      containers:
        - image: ghcr.io/vaikas/server@sha256:6f7b22349dd0465041a3c22af04c949f848a509b24907228929aa1514a0afc5d
          name: fulcio
          ports:
            - containerPort: 5555
          args:
            - "serve"
            - "--port=5555"
            - "--ca=fileca"
            - "--fileca-key"
            - "/var/run/fulcio-secrets/key.pem"
            - "--fileca-cert"
            - "/var/run/fulcio-secrets/cert.pem"
            - "--fileca-key-passwd"
            - "$(PASSWORD)"
            - "--ct-log-url=http://ctlog.ctlog-system.svc/sigstorescaffolding"
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fulcio-secret
                  key: password
          volumeMounts:
            - name: fulcio-config
              mountPath: /etc/fulcio-config
            - name: oidc-info
              mountPath: /var/run/fulcio
            - name: fulcio-cert
              mountPath: "/var/run/fulcio-secrets"
              readOnly: true
      volumes:
        - name: fulcio-config
          configMap:
            name: fulcio-config
        - name: fulcio-cert
          secret:
            secretName: fulcio-secret
            items:
              - key: private
                path: key.pem
              - key: cert
                path: cert.pem
        - name: oidc-info
          projected:
            sources:
              - configMap:
                  name: kube-root-ca.crt
                  items:
                    - key: ca.crt
                      path: ca.crt
                      mode: 0666

---


kind: Namespace
apiVersion: v1
metadata:
  name: rekor-system

---


apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: rekor-system
  name: cm-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["rekor-config"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-cm-updater
  namespace: rekor-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cm-operator
subjects:
  - kind: ServiceAccount
    name: createtree
    namespace: rekor-system

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: rekor-config
  namespace: rekor-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: createtree
  namespace: rekor-system

---


apiVersion: batch/v1
kind: Job
metadata:
  name: createtree
  namespace: rekor-system
spec:
  template:
    spec:
      serviceAccountName: createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createtree
          image: ghcr.io/vaikas/createtree@sha256:4abf45842808aa35a7aa4f2058ff7629ba1c4626571e1a64667828dd1d3759ab

---


kind: Namespace
apiVersion: v1
metadata:
  name: rekor-system

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: rekor
  namespace: rekor-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: rekor-system
  name: rekor
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: rekor
      containers:
        - name: rekor
          image: ghcr.io/vaikas/rekor-server@sha256:73777b2d17deb3f9577d6dd627c76774f7e4f98c875e10ab29a0f03d52b29205
          ports:
            - containerPort: 3000
          args: ["serve", "--trillian_log_server.address=log-server.trillian-system.svc", "--trillian_log_server.port=80", "--rekor_server.address=0.0.0.0",
            #          "--redis_server.address=10.234.175.59",
            #          "--redis_server.port=6379",
            "--enable_retrieve_api=false", "--trillian_log_server.tlog_id=$(TREE_ID)", "--log_type=prod", "--rekor_server.signer=memory", "--enable_attestation_storage=false"]
          #          "--attestation_storage_bucket=gs://vaikas-rekor",
          #          "--rekor_server.timestamp_chain=$(TIMESTAMP_CHAIN)"

          env:
            - name: TREE_ID
              valueFrom:
                configMapKeyRef:
                  name: rekor-config
                  key: treeID

---


kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---


apiVersion: v1
kind: Secret
metadata:
  name: trillian-client
  namespace: trillian-system
type: kubernetes.io/basic-auth
stringData:
  host: mysql-trillian.trillian-system.svc
  name: trillian
  username: trillian
  password: trillian

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: createdb
  namespace: trillian-system

---


apiVersion: batch/v1
kind: Job
metadata:
  name: createdb
  namespace: trillian-system
spec:
  template:
    spec:
      serviceAccountName: createdb
      restartPolicy: Never
      containers:
        - name: createdb
          image: ghcr.io/vaikas/createdb@sha256:b8e5a1446a267fe26c0bdd14e24e19c1f5c9ea1ee9e8c33c222989eab65215da
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/", "--db_name=trillian"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: host

---


kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---


apiVersion: v1
kind: Secret
metadata:
  name: trillian-database
  namespace: trillian-system
type: kubernetes.io/basic-auth
stringData:
  database-name: trillian
  username: trillian
  password: trillian

---


apiVersion: v1
kind: Service
metadata:
  name: mysql-trillian
  namespace: trillian-system
spec:
  ports:
    - port: 3306
  selector:
    app: mysql-trillian
  clusterIP: None
---
apiVersion: v1
kind: Pod
metadata:
  name: mysql-trillian
  namespace: trillian-system
  labels:
    app: mysql-trillian
spec:
  containers:
    - image: mysql/mysql-server:8.0
      name: mysql
      env:
        - name: MYSQL_ROOT_PASSWORD
          value: trillian
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: database-name
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: password
      ports:
        - containerPort: 3306
          name: mysql

---


kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: trillian
  namespace: trillian-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: trillian-system
  name: log-server
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: trillian
      containers:
        - name: log-server
          image: ghcr.io/vaikas/trillian_log_server@sha256:6f4d9677963646cbf45e403c86f9be404a0b485b62c8bf51cdbfeb81ccfe0e12
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/$(DATABASE_NAME)", "--storage_system=mysql", "--quota_system=mysql",
            #        "--etcd_servers=trillian-etcd-cluster-client.etcd-system.svc:2379",
            #        "--etcd_http_service=trillian-logserver-http",
            "--rpc_endpoint=0.0.0.0:8090",
            #        "--http_endpoint=0.0.0.0:8091",
            "--alsologtostderr"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: host
          ports:
            - name: h2c
              containerPort: 8090

---


kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---


apiVersion: v1
kind: ServiceAccount
metadata:
  name: trillian
  namespace: trillian-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: trillian-system
  name: log-signer
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    metadata:
      annotations:
        # LogSigner is stateful service because it gives promises to flush
        # the SCT to persistent store.
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "1"
    spec:
      serviceAccountName: trillian
      containers:
        - name: log-signer
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/$(DATABASE_NAME)", "--storage_system=mysql",
            # Either force the master, or use the etcd looks like are the only
            # two options. For now, just use this until we sort etcd stuff out.
            "--force_master",
            #        "--etcd_servers=trillian-etcd-cluster-client.etcd-system.svc:2379",
            "--quota_system=mysql",
            #        "--etcd_http_service=trillian-logsigner-http",
            #        "--http_endpoint=0.0.0.0:8091",
            "--sequencer_guard_window=1s", "--sequencer_interval=20ms", "--num_sequencers=10", "--batch_size=500",
            # No idea what this is...
            # "$(SIGNER_DEQUEUE_BUCKET_FRACTION)",
            "--master_hold_jitter=7200s", "--alsologtostderr"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: host
          image: ghcr.io/vaikas/trillian_log_signer@sha256:684f8f44c88cfb494204466d561d4b82c6dab4105802287ed8040ee5b9854945
          ports:
            - name: h2c
              containerPort: 8090

---
